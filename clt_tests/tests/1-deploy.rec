––– block: ./init/init –––
––– input –––
kubectl get nodes
––– output –––
#!/NAME\s+STATUS\s+ROLES\s+AGE\s+VERSION/!#
#!/[0-9a-z]{12}\s+Ready\s+control-plane,master\s+[0-9]+m\s+v[0-9\.]+\+k3s1/!#
––– input –––
sed -i 's/^version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: 0.0.0-unstable/' ./charts/manticoresearch/Chart.yaml
––– output –––
––– input –––
sed -i 's/^appVersion: [0-9]\+\.[0-9]\+\.[0-9]\+.[0-9]\+/appVersion: 0.0.0-unstable/' ./charts/manticoresearch/Chart.yaml
––– output –––
––– input –––
cat ./charts/manticoresearch/Chart.yaml
––– output –––
apiVersion: v2
name: manticoresearch
description: A Helm chart for Kubernetes
# A chart can be either an 'application' or a 'library' chart.
#
# Application charts are a collection of templates that can be packaged into versioned archives
# to be deployed.
#
# Library charts provide useful utilities or functions for the chart developer. They're included as
# a dependency of application charts to inject those utilities and functions into the rendering
# pipeline. Library charts do not define any templates and therefore cannot be deployed.
type: application
# This is the chart version. This version number should be incremented each time you make changes
# to the chart and its templates, including the app version.
# Versions are expected to follow Semantic Versioning (https://semver.org/)
version: 0.0.0-unstable
# This is the version number of the application being deployed. This version number should be
# incremented each time you make changes to the application. Versions are not expected to
# follow Semantic Versioning. They should reflect the version the application is using.
appVersion: 0.0.0-unstable
––– input –––
helm install my-helm ./charts/manticoresearch
––– output –––
WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /tmp/output/kubeconfig-latest.yaml
WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /tmp/output/kubeconfig-latest.yaml
NAME: my-helm
LAST DEPLOYED: #!/[a-zA-Z]{3}\s+[a-zA-Z]{3}\s+[0-9]+\s+[0-9]+:[0-9]+:[0-9]+\s+[0-9]+/!#
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
1) Wait until all pods are moved to running state:
kubectl --namespace default get po
2) Forward worker port to your local machine:
export WORKER_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=manticoresearch,app.kubernetes.io/instance=my-helm,app.kubernetes.io/component=worker" -o jsonpath="{.items[0].metadata.name}")
kubectl --namespace default port-forward $WORKER_NAME 7306:9306
3) Connect to the worker:
mysql -h0 -P7306
4) Create your first table:
CREATE TABLE idx(title text);
5) Add table to cluster:
ALTER CLUSTER manticore_cluster ADD idx;
6) Add some data to your table:
INSERT INTO manticore_cluster:idx (title) VALUES ('dog is brown'), ('mouse is small');
7) Forward worker port to your local machine:
export BALANCER_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=manticoresearch,app.kubernetes.io/instance=my-helm,name=my-helm-manticoresearch-balancer" -o jsonpath="{.items[0].metadata.name}")
kubectl --namespace default port-forward $BALANCER_NAME 6306:9306
8) Search through the balancer:
mysql -h0 -P6306 -e "SELECT * FROM idx WHERE match('dog')"
9) Scale the cluster:
kubectl scale statefulsets manticore-manticoresearch-worker -n default --replicas=5
