name: Release Charts
on:
  push:
    branches:
      - master

jobs:
  build-balancer:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for Git tag history

      - name: Write outputs
        id: vars
        run: |
          chart_version=$(cat ./charts/manticoresearch/Chart.yaml | grep appVersion | cut -d' ' -f2)
          chart_tag=$(cat ./charts/manticoresearch/Chart.yaml | grep version: | cut -d' ' -f2)
          echo "chartVersion=$chart_version" >> $GITHUB_OUTPUT
          if git tag --list | grep -q "^$chart_tag$"; then
            echo "isNeedToBuild=" >> $GITHUB_OUTPUT
          else
            echo "isNeedToBuild=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: steps.vars.outputs.isNeedToBuild

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        if: steps.vars.outputs.isNeedToBuild

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: steps.vars.outputs.isNeedToBuild
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push balancer
        uses: docker/build-push-action@v4
        if: steps.vars.outputs.isNeedToBuild
        with:
          context: ./sources/manticore-balancer
          platforms: linux/amd64,linux/arm64
          push: true
          tags: manticoresearch/helm-balancer:${{ steps.vars.outputs.chartVersion }}
          cache-from: type=registry,ref=manticoresearch/helm-balancer:cache
          cache-to: type=inline

  build-worker:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for Git tag history

      - name: Write outputs
        id: vars
        run: |
          chart_version=$(cat ./charts/manticoresearch/Chart.yaml | grep appVersion | cut -d' ' -f2)
          chart_tag=$(cat ./charts/manticoresearch/Chart.yaml | grep version: | cut -d' ' -f2)
          echo "chartVersion=$chart_version" >> $GITHUB_OUTPUT
          if git tag --list | grep -q "^$chart_tag$"; then
            echo "isNeedToBuild=" >> $GITHUB_OUTPUT
          else
            echo "isNeedToBuild=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: steps.vars.outputs.isNeedToBuild

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        if: steps.vars.outputs.isNeedToBuild

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: steps.vars.outputs.isNeedToBuild
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push worker
        uses: docker/build-push-action@v4
        if: steps.vars.outputs.isNeedToBuild
        with:
          context: ./sources/manticore-worker
          platforms: linux/amd64,linux/arm64
          push: true
          tags: manticoresearch/helm-worker:${{ steps.vars.outputs.chartVersion }}
          cache-from: type=registry,ref=manticoresearch/helm-worker:cache
          cache-to: type=inline

  release:
    needs: [build-balancer, build-worker]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for Git tag history

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1

      - name: Lint Helm Chart
        run: helm lint ./charts/manticoresearch

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.4.1
        with:
          config: cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"